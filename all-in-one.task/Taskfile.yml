version: '3'

env:
  PULUMI_CONFIG_PASSPHRASE: ""
  KUBECONFIG: ./0.pulumi/all-in-one/kubeconfig.yaml
  TALOSCONFIG: ./0.pulumi/all-in-one/talos-config.yaml

tasks:
  up:
    cmds:
      - task up-aio
      - task up-app
  talosctl:
    silent: true
    cmds:
      - talosctl {{ .CLI_ARGS }}
  cilium:
    cmds:
      - cilium {{ .CLI_ARGS }}
  k9s:
    cmds:
      - k9s {{ .CLI_ARGS }}
  argo-pwd:
    cmds:
    - kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
  argo-forward:
    cmds:
    - kubectl port-forward svc/argocd-server -n argocd 8080:443
  vault-pwd:
    cmds:
    - kubectl -n vault get secret vault-unseal-keys -o jsonpath="{.data.vault-root}" | base64 -d
  vault-forward:
    cmds:
    - kubectl port-forward svc/vault -n vault 8200:8200
  kubectl:
    cmds:
      - echo ${KUBECONFIG}
      - kubectl {{ .CLI_ARGS }}
  aio:
    dir: ./0.pulumi/all-in-one
    env:
      PULUMI_CONFIG_PASSPHRASE: ""
      KUBECONFIG: ./kubeconfig.yaml
    cmds:
      - pulumi {{ .CLI_ARGS }}
  app:
    dir: ./0.pulumi/app
    env:
      PULUMI_CONFIG_PASSPHRASE: ""
      KUBECONFIG: "../all-in-one/kubeconfig.yaml"
      KUBERNETES_MASTER: "../all-in-one/kubeconfig.yaml"
    cmds:
      - pulumi {{ .CLI_ARGS }}
  up-aio:
    env:
      PULUMI_CONFIG_PASSPHRASE: ""
      KUBECONFIG: ./kubeconfig.yaml
    cmds:
      - task aio:aio -- up
  up-app:
    env:
      PULUMI_CONFIG_PASSPHRASE: ""
      KUBECONFIG: "../all-in-one/kubeconfig.yaml"
      KUBERNETES_MASTER: "../all-in-one/kubeconfig.yaml"
    cmds:
      - task aio:app -- up
  reset-aio:
    cmds:
      - task aio:aio -- state delete --all
  reset-app:
    cmds:
      - task aio:app -- state delete --all

# Omni tasks
  omni:ctl:
    silent: true
    env:
      OMNICONFIG: ./0.pulumi/all-in-one/omniconfig.yaml
    cmds:
      - omnictl {{ .CLI_ARGS }}
  omni:talos:
    silent: true
    env:
      TALOSCONFIG: ./0.pulumi/all-in-one/talos-config.omni.yaml
    cmds:
      - talosctl {{ .CLI_ARGS }}
  omni:create-sa:
    vars:
      cluster: '{{.cluster}}'
    env:
      OMNICONFIG: ./0.pulumi/all-in-one/omniconfig.yaml
    preconditions:
      - sh: '[ {{.cluster}} != "" ]'
        msg: "cluster is required ex task omni:create-sa cluster='mono-node'"
    cmds:
      - omnictl serviceaccount create --role=InfraProvider --use-user-role=false infra-provider:{{.cluster}}
      - echo "Service account 'infra-provider:{{.cluster}}' created successfully. please add it in the vault with path like mc-authentik/{{.cluster}}/config"

