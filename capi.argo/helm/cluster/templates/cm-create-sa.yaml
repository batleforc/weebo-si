kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-create-sa
apiVersion: v1
data:
  manifest.j2: |
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: argocd-manager
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: argocd-manager-role
    rules:
    - apiGroups:
      - '*'
      resources:
      - '*'
      verbs:
      - '*'
    - nonResourceURLs:
      - '*'
      verbs:
      - '*'
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: argocd-manager-role-binding
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: argocd-manager-role
    subjects:
    - kind: ServiceAccount
      name: argocd-manager
      namespace: kube-system
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: argocd-manager-secret
      namespace: kube-system
      annotations:
        kubernetes.io/service-account.name: argocd-manager
    type: kubernetes.io/service-account-token
    ---
    apiVersion: v1
    kind: Namespace
    metadata:
      name: cert-manager
      labels:
        name: cert-manager
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: certificate
      namespace: cert-manager
      labels:
        weebo.si/source-ca: "true"
    data:
      root-ca.crt: {{"{{"}} rootca.content | b64decode }}
      sub-ca.crt: {{"{{"}} subca.content | b64decode }}
      vault-ca.crt: {{"{{"}} lookup('ansible.builtin.file', '/ca/vault/ca.crt') | b64decode }}
  secrets.j2: |
    apiVersion: v1
    kind: Secret
    metadata:
      name: {{ .Release.Name }}-secret
      namespace: argocd
      labels:
        argocd.argoproj.io/secret-type: cluster
    type: Opaque
    stringData:
      name: {{ .Release.Name }}
      server: {{"{{"}} (kubeconfig.stdout | from_yaml).clusters[0].cluster.server }}
      config: |
        {
          "bearerToken": "{{"{{"}}  secret.stdout | b64decode }}",
          "tlsClientConfig": {
            "serverName": "kubernetes.default.svc",
            "caData": "{{"{{"}} (kubeconfig.stdout | from_yaml).clusters[0].cluster['certificate-authority-data'] }}"
          }
        }
  playbook.yaml: |
    - hosts: localhost
      tasks:
        - name: Fetch RootCA from Vault
          ansible.builtin.uri:
            url: "{{ .Values.certificate.rootCA.url }}"
            method: GET
            return_content: true
            ca_path: /ca/vault/ca.crt
            body_format: raw
            status_code: 200
          register: rootca
        - name: Fetch SubCA from Vault
          ansible.builtin.uri:
            url: "{{ .Values.certificate.subCA.url }}"
            method: GET
            return_content: true
            ca_path: /ca/vault/ca.crt
            body_format: raw
            status_code: 200
          register: subca
        - name: Create Secret
          ansible.builtin.template:
            src: manifest.j2
            dest: /tmp/manifest.yaml
        - name: Apply manifest
          ansible.builtin.command:
            cmd: "kubectl apply -f /tmp/manifest.yaml --kubeconfig /tokens/value"
        - name: Get Secret
          ansible.builtin.command:
            cmd: "kubectl get secret argocd-manager-secret -n kube-system -o jsonpath='{.data.token}' --kubeconfig /tokens/value"
          register: secret
        - name: Fail if token is empty
          ansible.builtin.fail:
            msg: "Token is empty"
          when: secret.stdout == "" or secret.stdout is not defined or "Error from server (NotFound)" in secret.stdout
        - name: "Print token"
          ansible.builtin.debug:
            msg: "Please copy token : {{"{{"}}  secret.stdout | b64decode }}"
        - name: Read Kubeconfig
          ansible.builtin.command:
            cmd: "cat /tokens/value"
          register: kubeconfig
        - name: Create Secret
          ansible.builtin.template:
            src: secrets.j2
            dest: /tmp/secrets.yaml
        - name: Apply Secret
          ansible.builtin.command:
            cmd: "kubectl apply -f /tmp/secrets.yaml"
